unit uMain;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, AdvUtil, Vcl.StdCtrls, Vcl.Grids,
  AdvObj, BaseGrid, AdvGrid, Vcl.ExtCtrls, IniFiles, VclTee.TeeGDIPlus,
  VCLTee.TeEngine, VCLTee.Series, VCLTee.TeeProcs, VCLTee.Chart, Math,
  Vcl.Samples.Spin;

type
  TfMain = class(TForm)
    Panel1: TPanel;
    edtPoly: TEdit;
    btnPoly: TButton;
    MemoResults: TMemo;
    Panel2: TPanel;
    asgProduct: TAdvStringGrid;
    btnPolyChart: TButton;
    btnStepPrice: TButton;
    Panel3: TPanel;
    asgPoly: TAdvStringGrid;
    Chart1: TChart;
    Series1: TLineSeries;
    Series2: TLineSeries;
    Series3: TLineSeries;
    Series4: TLineSeries;
    edtTerms: TSpinEdit;
    Button1: TButton;
    Button3: TButton;
    Panel4: TPanel;
    Label1: TLabel;
    edtQtn: TEdit;
    btnPriceCal: TButton;
    edtPriceResult: TEdit;
    Label2: TLabel;
    Label3: TLabel;
    edtSuEic: TEdit;
    Label4: TLabel;
    edtMaginRate: TEdit;
    Panel5: TPanel;
    cbbProducts: TComboBox;
    Button4: TButton;
    Button5: TButton;
    Button6: TButton;
    procedure FormShow(Sender: TObject);
    procedure btnPolyClick(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure btnStepPriceClick(Sender: TObject);
    procedure btnPolyChartClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure btnPriceCalClick(Sender: TObject);
    procedure edtQtnChange(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure cbbProductsChange(Sender: TObject);
    procedure asgPolyDblClickCell(Sender: TObject; ARow, ACol: Integer);
  private
    procedure BaseDataSet;
    procedure calculate_fit(const nTerms: integer);
    procedure UserInIMaker(nFileName: string);
    procedure UserInIOpen(nFileName: string);
    procedure PriceCal;
    procedure ProductsInIMaker(nFileName: string);
    procedure ProductsInIOpen(nFileName: string);
    procedure GridSetting;
    procedure PolyChart;
    procedure StepPrice;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  fMain: TfMain;

const
  max_points = 20;
  max_terms = 10;
var
  nPoints: 1..max_points;
  x, y: array [0..max_points-1] of real;
  coef: array [0..max_terms-1] of real;
  correl: real;
  Buf_RawData : Real;

implementation
uses CurveFit;
{$R *.dfm}

procedure TfMain.asgPolyDblClickCell(Sender: TObject; ARow, ACol: Integer);
var i : integer;
    nValue : single;
    nString : string;
begin
  for I := 1 to asgPoly.RowCount -1 do begin
    nValue := asgPoly.Cells[6,i].ToSingle;
    nValue := nValue / 1100;// 환율 1100원
    asgPoly.Cells[7,i] := formatfloat('#,##0.#',nValue);
  end;
end;

procedure TfMain.BaseDataSet;
var i : Integer;
begin
  nPoints := asgPoly.RowCount -1; // 1,20,50,100,200,500,1000,2000,5000,10000
  for i := 0 to nPoints - 1 do
  begin
    x [i] := StrToFloat(asgPoly.Cells	[2,i+1]);  //  각겨
    y [i] := StrToFloat(asgPoly.Cells	[1,i+1]);  //  수량
  end;
end;

procedure TfMain.calculate_fit (const nTerms: integer);
var
  i, j: integer;
  xc, yc, delta: real;
begin

  // Sanity check on arguments
  if (nTerms < 1) or (nTerms > max_terms) then Exit;

  // Fill in the X and Y arrays
  BaseDataSet;

  // Uncomment the line below to check for bad data causing exception.
//  for i := 0 to 8 do y [i] := 2.0;

  // Remove any existing display of results
  MemoResults.Clear;

  MemoResults.Lines.Add(' I    X      Y    Ycalc  residual');
  // Call the PolyFit routine.  The output coeffs array and correl(ation)
//  PolyFit (x, y, coef, correl, nPoints, nTerms);
  PolyFit (y, x, coef, correl, nPoints, nTerms);

  // Display the results in the lines of a MemoControl

  for i := 0 to nPoints - 1 do
    begin
    yc := 0.0;
    xc := 1.0;
    for j := 0 to nTerms - 1 do
      begin
      yc := yc + coef [j] * xc;
      xc := xc * x [i];
      end;
    delta := yc - y [i];
    MemoResults.Lines.Add (Format ('%2d   %3f %6.2f %6.2f %6.2f',
      [i, x [i], y [i], yc, delta]));
    end;
  MemoResults.Lines.Add (' ');
  MemoResults.Lines.Add ('Coefficients');
  MemoResults.Lines.Add (Format ('%.5e  constant term', [coef [0]]));

  for i := 1 to nTerms - 1 do
    MemoResults.Lines.Add (Format ('%.5e   X^%d', [coef [i], i]));
  MemoResults.Lines.Add (Format ('%.5e  correlation coefficient', [correl]));
end;

procedure TfMain.cbbProductsChange(Sender: TObject);
var strTemp : string;
begin
  strTemp := ExtractFilePath(paramstr(0));
  ProductsInIOpen(strTemp + cbbProducts.Text + '.ini');
//  GridSetting;
  StepPrice;
  PolyChart;
end;

procedure TfMain.ProductsInIOpen(nFileName : string);
var
  ini : TIniFile;
  sName : string;
  nAge, i, j, nItemCnt   : Integer;
  dtNow  : TDateTime;
begin
  ini := TIniFile.Create(nFileName);
  try
    for I := 0 to asgProduct.ColCount -1 do begin
      for j := 0 to asgProduct.RowCount -1 do begin
        asgProduct.Cells[i,j] := ini.ReadString('asgProduct', I.tostring + ',' + J.ToString , '');
      end;
    end;

    for I := 0 to asgPoly.ColCount -1 do begin
      for j := 0 to asgPoly.RowCount -1 do begin
        asgPoly.Cells[i,j] := ini.ReadString('asgPoly', I.tostring + ',' + J.ToString , '');
      end;
    end;

    edtTerms.Text := ini.ReadString('edtTerms', 'edtTerms' , '');
  finally
    ini.Free;
  end;
end;

procedure TfMain.edtQtnChange(Sender: TObject);
begin
  PriceCal;
end;

procedure TfMain.btnPolyClick(Sender: TObject);
var Stemp : string;
    i, j : integer;
    fTemp, nValue, snTemp  : Single;
    snMagin,snMaginRate, snQtn, snWonGa : single;
begin
  Calculate_fit (strTointDef(edtTerms.Text,0));  // When the UpDown control is clicked, trya curve fit with a new number of terms

  for i := 0 to MemoResults.Lines.Count -1 do
  begin
    if Pos('constant',MemoResults.Lines.Strings[i]) > 0 then
      Stemp := 'C0:' + Copy(MemoResults.Lines.Strings[i],1,12)
    else if Pos('X^1',MemoResults.Lines.Strings[i]) > 0 then
      Stemp := Stemp+ ' C1:' + Copy(MemoResults.Lines.Strings[i],1,12)
    else if Pos('X^2',MemoResults.Lines.Strings[i]) > 0 then
      Stemp := Stemp+ ' C2:' + Copy(MemoResults.Lines.Strings[i],1,12)
    else if Pos('X^3',MemoResults.Lines.Strings[i]) > 0 then
      Stemp := Stemp+ ' C3:' + Copy(MemoResults.Lines.Strings[i],1,12)
    else if Pos('X^4',MemoResults.Lines.Strings[i]) > 0 then
      Stemp := Stemp+ ' C4:' + Copy(MemoResults.Lines.Strings[i],1,12)
    else if Pos('X^5',MemoResults.Lines.Strings[i]) > 0 then
      Stemp := Stemp+ ' C5:' + Copy(MemoResults.Lines.Strings[i],1,12)
    else if Pos('X^6',MemoResults.Lines.Strings[i]) > 0 then
      Stemp := Stemp+ ' C6:' + Copy(MemoResults.Lines.Strings[i],1,12)
    else if Pos('X^7',MemoResults.Lines.Strings[i]) > 0 then
      Stemp := Stemp+ ' C7:' + Copy(MemoResults.Lines.Strings[i],1,12)
    else if Pos('X^8',MemoResults.Lines.Strings[i]) > 0 then
      Stemp := Stemp+ ' C8:' + Copy(MemoResults.Lines.Strings[i],1,12)
    else if Pos('X^9',MemoResults.Lines.Strings[i]) > 0 then
      Stemp := Stemp+ ' C9:' + Copy(MemoResults.Lines.Strings[i],1,12);
  end;

  edtPoly.Text := Stemp;

  snWonGa :=  strTofloatDef(asgProduct.Cells[4,1],0);// 원가
  for I := 1 to asgPoly.RowCount -1 do begin
    snQtn := strTofloatDef(asgPoly.Cells[1,i],0);
    nValue := 0;
    for j := 0 to strTointDef(edtTerms.Text,0) -1 do  begin
      nValue := nValue + coef[j] * Power(snQtn,j);
    end;
    asgPoly.Cells[3,i] := formatfloat('#,##0.#',RoundTo(nValue,3)); // 계산된 가격
    snMagin := (nValue - snWonGa) * snQtn; //마진 (원);
    snMaginRate := (nValue - snWonGa) / nValue * 100; // 마진율(%)
    asgPoly.Cells[4,i] := formatfloat('#,000',RoundTo(snMagin,2)); // 마진(원)
    asgPoly.Cells[5,i] := formatfloat('#,##0.#',snMaginRate); // 마진율(%);
    if i > 3 then // 1, 20, 50 개 까지는 수동입력
      asgPoly.Cells[6,i] := asgPoly.Cells[3,i]; // 최종판가를 임시로 계산값을 입력
    asgPoly.Cells[6,0] := '최종판가';
    asgPoly.Cells[7,0] := '해외($)';
    asgPoly.Cells[8,0] := '비고';
  end;

  PolyChart;
end;

procedure TfMain.btnPolyChartClick(Sender: TObject);
begin
  PolyChart;
end;

procedure TfMain.PolyChart;
var
  I: Integer;
begin
// 보상식 결과를 적용한 것을 그래프로 (가격, 마진, 마진율)
//  chart1.Series[0].Clear;
  chart1.Series[1].Clear;
  chart1.Series[2].Clear;
  chart1.Series[3].Clear;
  for I := 1 to asgPoly.RowCount -1 do begin
    chart1.Series[1].AddXY(strTofloatDef(asgPoly.Cells[1,i],0),strTofloatDef(StringReplace(asgPoly.Cells[3,i],',','',[rfReplaceAll]),0));
//    chart1.Series[2].AddXY(strTofloatDef(asgPoly.Cells[1,i],0),strTofloatDef(StringReplace(asgPoly.Cells[4,i],',','',[rfReplaceAll]),0));
//    chart1.Series[3].AddXY(strTofloatDef(asgPoly.Cells[1,i],0),strTofloatDef(StringReplace(asgPoly.Cells[5,i],',','',[rfReplaceAll]),0));
  end;
end;

procedure TfMain.Button1Click(Sender: TObject);
var
  I: Integer;
begin
// 보상식 결과를 적용한 것을 그래프로 (가격, 마진, 마진율)
  chart1.Series[0].Clear;
  chart1.Series[1].Clear;
  chart1.Series[2].Clear;
  chart1.Series[3].Clear;
  for I := 1 to asgPoly.RowCount -1 do begin
//    chart1.Series[1].AddXY(strTofloatDef(asgPoly.Cells[1,i],0),strTofloatDef(StringReplace(asgPoly.Cells[3,i],',','',[rfReplaceAll]),0));
    chart1.Series[2].AddXY(strTofloatDef(asgPoly.Cells[1,i],0),strTofloatDef(StringReplace(asgPoly.Cells[4,i],',','',[rfReplaceAll]),0));
//    chart1.Series[3].AddXY(strTofloatDef(asgPoly.Cells[1,i],0),strTofloatDef(StringReplace(asgPoly.Cells[5,i],',','',[rfReplaceAll]),0));
  end;
end;

procedure TfMain.btnStepPriceClick(Sender: TObject);
begin
  StepPrice;
end;

procedure TfMain.StepPrice;
var
  I: Integer;
begin
// 단계별 가격을 그래프로 그린다.
  chart1.Series[0].Clear;
//  chart1.Series[1].Clear;
  chart1.Series[2].Clear;
  chart1.Series[3].Clear;
  for I := 1 to asgPoly.RowCount -1 do
    chart1.Series[0].AddXY(strTofloatDef(asgPoly.Cells[1,i],0),strTofloatDef(StringReplace(asgPoly.Cells[2,i],',','',[rfReplaceAll]),0));
end;

procedure TfMain.Button3Click(Sender: TObject);
var
  I: Integer;
begin
// 보상식 결과를 적용한 것을 그래프로 (가격, 마진, 마진율)
  chart1.Series[0].Clear;
  chart1.Series[1].Clear;
  chart1.Series[2].Clear;
  chart1.Series[3].Clear;
  for I := 1 to asgPoly.RowCount -1 do begin
//    chart1.Series[1].AddXY(strTofloatDef(asgPoly.Cells[1,i],0),strTofloatDef(StringReplace(asgPoly.Cells[3,i],',','',[rfReplaceAll]),0));
//    chart1.Series[2].AddXY(strTofloatDef(asgPoly.Cells[1,i],0),strTofloatDef(StringReplace(asgPoly.Cells[4,i],',','',[rfReplaceAll]),0));
    chart1.Series[3].AddXY(strTofloatDef(asgPoly.Cells[1,i],0),strTofloatDef(StringReplace(asgPoly.Cells[5,i],',','',[rfReplaceAll]),0));
  end;
end;

procedure TfMain.Button4Click(Sender: TObject);
var strTemp : string;
begin
  strTemp := ExtractFilePath(paramstr(0));
  ProductsInIMaker(strTemp + cbbProducts.Text +  '.ini');
end;

procedure TfMain.ProductsInIMaker(nFileName : string);
var i, j : integer;
    strTemp : string;
    ini : TIniFile;
begin
  ini := TIniFile.Create(nFileName);
  try
    for I := 0 to asgProduct.ColCount -1 do begin
      for j := 0 to asgProduct.RowCount -1 do begin
        strTemp := asgProduct.Cells[i,j];
        ini.WriteString('asgProduct', I.tostring + ',' + J.ToString , strTemp);
      end;
    end;

    for I := 0 to asgPoly.ColCount -1 do begin
      for j := 0 to asgPoly.RowCount -1 do begin
        strTemp := asgPoly.Cells[i,j];
        ini.WriteString('asgPoly', I.tostring + ',' + J.ToString , strTemp);
      end;
    end;

    strTemp := edtTerms.Text;
    ini.WriteString('edtTerms', 'edtTerms' , strTemp);

  finally
    ini.Free;
  end;
end;

procedure TfMain.Button5Click(Sender: TObject);
begin
  cbbProducts.Items.Delete(cbbProducts.ItemIndex);
end;

procedure TfMain.Button6Click(Sender: TObject);
begin
  cbbProducts.Items.Add(cbbProducts.Text);
  GridSetting;
end;

procedure TfMain.btnPriceCalClick(Sender: TObject);
begin
  PriceCal;
end;

procedure TfMain.PriceCal;
var snQtn, nValue, snMagin, snMaginRate, snWonGa : single;
    j : integer;
begin
// 단가계산
  snQtn := strTofloatDef(edtQtn.Text,0);
  nValue := 0;
  for j := 0 to strTointDef(edtTerms.Text,0) -1 do  begin
    nValue := nValue + coef[j] * Power(snQtn,j);
  end;

  snWonGa := strTofloatDef(asgProduct.Cells[4,1],0);// 원가
  edtPriceResult.Text := formatfloat('#,##0.#',RoundTo(nValue,3)); // 계산된 가격
  snMagin := (nValue - snWonGa) * snQtn; //마진 (원);
  snMaginRate := (nValue - snWonGa) / nValue * 100; // 마진율(%)
  edtSuEic.Text := formatfloat('#,000',RoundTo(snMagin,2)); // 마진(원)
  edtMaginRate.Text := formatfloat('#,##0.#',snMaginRate); // 마진율(%);
end;

procedure TfMain.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
var strTemp : string;
begin
  strTemp := ExtractFilePath(paramstr(0));
  UserInIMaker(strTemp + 'PricePolyUser.ini');
end;

procedure TfMain.UserInIOpen(nFileName : string);
var
  ini : TIniFile;
  sName : string;
  nAge, i, j, nItemCnt   : Integer;
  dtNow  : TDateTime;
begin
  ini := TIniFile.Create(nFileName);
  try
    for I := 0 to asgProduct.ColCount -1 do begin
      for j := 0 to asgProduct.RowCount -1 do begin
        asgProduct.Cells[i,j] := ini.ReadString('asgProduct', I.tostring + ',' + J.ToString , '');
      end;
    end;

    for I := 0 to asgPoly.ColCount -1 do begin
      for j := 0 to asgPoly.RowCount -1 do begin
        asgPoly.Cells[i,j] := ini.ReadString('asgPoly', I.tostring + ',' + J.ToString , '');
      end;
    end;

    edtTerms.Text := ini.ReadString('edtTerms', 'edtTerms' , '');

    cbbProducts.Items.Clear;
    nItemCnt := ini.ReadInteger('cbbProducts', 'ItemCnt', 0);
    for i := 0 to nItemCnt -1 do begin
      cbbProducts.Items.Add(ini.ReadString('cbbProducts', I.tostring, ''));
    end;
  finally
    ini.Free;
  end;
end;

procedure TfMain.UserInIMaker(nFileName : string);
var i, j : integer;
    strTemp : string;
    ini : TIniFile;
begin
  ini := TIniFile.Create(nFileName);
  try
    for I := 0 to asgProduct.ColCount -1 do begin
      for j := 0 to asgProduct.RowCount -1 do begin
        strTemp := asgProduct.Cells[i,j];
        ini.WriteString('asgProduct', I.tostring + ',' + J.ToString , strTemp);
      end;
    end;

    for I := 0 to asgPoly.ColCount -1 do begin
      for j := 0 to asgPoly.RowCount -1 do begin
        strTemp := asgPoly.Cells[i,j];
        ini.WriteString('asgPoly', I.tostring + ',' + J.ToString , strTemp);
      end;
    end;

    strTemp := edtTerms.Text;
    ini.WriteString('edtTerms', 'edtTerms' , strTemp);

    ini.WriteInteger('cbbProducts', 'ItemCnt', cbbProducts.Items.Count);
    for i := 0 to cbbProducts.Items.Count -1 do begin
      strTemp := cbbProducts.Items.Strings[i];
      ini.WriteString('cbbProducts', I.tostring, strTemp);
    end;

  finally
    ini.Free;
  end;
end;

procedure TfMain.FormShow(Sender: TObject);
var i, nWidth, nTotalWidth : integer;
    strTemp : string;
begin
  GridSetting;
  strTemp := ExtractFilePath(paramstr(0));
  UserInIOpen(strTemp + 'PricePolyUser.ini');

end;

procedure TfMain.GridSetting;
var i, nWidth, nTotalWidth : integer;
    nTemp : string;
begin
  asgProduct.Cells[0,0] :=  'No';
  asgProduct.Cells[1,0] :=  '표준가';
  asgProduct.Cells[2,0] :=  '최저가';
  asgProduct.Cells[3,0] :=  '재료비';
  asgProduct.Cells[4,0] :=  '원가';
  nTotalWidth := 0;
  for I := 0 to asgProduct.ColCount -1 do begin
    case i of
      0: nWidth:= 30;   //
      1: nWidth:= 60;   //
      2: nWidth:= 60;   //
      3: nWidth:= 60;  //
      4: nWidth:= 60;   //
      7: nWidth:= 50;
      else nWidth := 60;
    end;
    asgProduct.ColWidths[i] := nWidth;
    nTotalWidth := nTotalWidth + nWidth;
  end;
  asgProduct.Width := nTotalWidth + 3;
  asgProduct.ScrollBars := ssNone;

  asgPoly.Cells[0,0] :=  'No';
  asgPoly.Cells[1,0] :=  '수량';
  asgPoly.Cells[2,0] :=  '판가';
  asgPoly.Cells[3,0] :=  '계산값';
  asgPoly.Cells[4,0] :=  '마진(원)';
  asgPoly.Cells[5,0] :=  '마진(%)';
  asgPoly.Cells[6,0] :=  '최종판가';
  asgPoly.Cells[7,0] :=  '해외판가';
  asgPoly.Cells[8,0] :=  '비고';

  for I := 0 to asgPoly.ColCount -1 do begin
    case i of
      0: nWidth:= 30;   //
      1: nWidth:= 60;   //
      2: nWidth:= 60;   //
      3: nWidth:= 60;  //
      4: nWidth:= 60;   //
      else nWidth := 60;
    end;
    asgPoly.ColWidths[i] := nWidth;
  end;

  for i := 1  to asgPoly.RowCount -1 do begin
    asgPoly.Cells[0,i] := i.ToString;
    case i of
      1: nTemp := '1';
      2: nTemp := '20';
      3: nTemp := '50';
      4: nTemp := '100';
      5: nTemp := '200';
      6: nTemp := '500';
      7: nTemp := '1000';
      8: nTemp := '2000';
      9: nTemp := '5000';
      10: nTemp :='10000';
	  end;
    asgPoly.Cells[1,i] := nTemp;
  end;
end;

end.
